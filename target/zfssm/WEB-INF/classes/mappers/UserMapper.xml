<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.entity.User">
    <result column="userid" jdbcType="INTEGER" property="userid" />
    <result column="institutionname" jdbcType="VARCHAR" property="institutionname" />
    <result column="certificatetype" jdbcType="VARCHAR" property="certificatetype" />
    <result column="reviewdepartment" jdbcType="VARCHAR" property="reviewdepartment" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="contactpersonname" jdbcType="VARCHAR" property="contactpersonname" />
    <result column="telphone" jdbcType="VARCHAR" property="telphone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="roleid" jdbcType="INTEGER" property="roleid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    userid, institutionname, certificatetype, reviewdepartment, username, password, contactpersonname,
    telphone, email, roleid
  </sql>
  <select id="selectByExample" parameterType="com.entity.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from zf_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.entity.UserExample">
    delete from zf_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.entity.User">
    insert into zf_user (userid, institutionname, certificatetype,
      reviewdepartment, username, password,
      contactpersonname, telphone, email,
      roleid)
    values (#{userid,jdbcType=INTEGER}, #{institutionname,jdbcType=VARCHAR}, #{certificatetype,jdbcType=VARCHAR},
      #{reviewdepartment,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{contactpersonname,jdbcType=VARCHAR}, #{telphone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
      #{roleid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.entity.User">
    insert into zf_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        userid,
      </if>
      <if test="institutionname != null">
        institutionname,
      </if>
      <if test="certificatetype != null">
        certificatetype,
      </if>
      <if test="reviewdepartment != null">
        reviewdepartment,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="contactpersonname != null">
        contactpersonname,
      </if>
      <if test="telphone != null">
        telphone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="roleid != null">
        roleid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="institutionname != null">
        #{institutionname,jdbcType=VARCHAR},
      </if>
      <if test="certificatetype != null">
        #{certificatetype,jdbcType=VARCHAR},
      </if>
      <if test="reviewdepartment != null">
        #{reviewdepartment,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="contactpersonname != null">
        #{contactpersonname,jdbcType=VARCHAR},
      </if>
      <if test="telphone != null">
        #{telphone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="roleid != null">
        #{roleid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.entity.UserExample" resultType="java.lang.Integer">
    select count(*) from zf_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update zf_user
    <set>
      <if test="record.userid != null">
        userid = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.institutionname != null">
        institutionname = #{record.institutionname,jdbcType=VARCHAR},
      </if>
      <if test="record.certificatetype != null">
        certificatetype = #{record.certificatetype,jdbcType=VARCHAR},
      </if>
      <if test="record.reviewdepartment != null">
        reviewdepartment = #{record.reviewdepartment,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.contactpersonname != null">
        contactpersonname = #{record.contactpersonname,jdbcType=VARCHAR},
      </if>
      <if test="record.telphone != null">
        telphone = #{record.telphone,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.roleid != null">
        roleid = #{record.roleid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update zf_user
    set userid = #{record.userid,jdbcType=INTEGER},
    institutionname = #{record.institutionname,jdbcType=VARCHAR},
    certificatetype = #{record.certificatetype,jdbcType=VARCHAR},
    reviewdepartment = #{record.reviewdepartment,jdbcType=VARCHAR},
    username = #{record.username,jdbcType=VARCHAR},
    password = #{record.password,jdbcType=VARCHAR},
    contactpersonname = #{record.contactpersonname,jdbcType=VARCHAR},
    telphone = #{record.telphone,jdbcType=VARCHAR},
    email = #{record.email,jdbcType=VARCHAR},
    roleid = #{record.roleid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <!-- 查询用户是否存在 -->
  <select id="findUser" parameterType="com.entity.User" resultMap="BaseResultMap">
  		select * from zf_user where username=#{username} and password=#{password}
  </select>

  <!-- 查询用户 -->
  <select id="findAll" resultType="com.entity.User">
		select * from zf_user
	</select>

  <!-- 通过名字查询用户 -->
  <select id="findUserByName" resultType="com.entity.User">
	   select * from zf_user where  username=#{username}
	</select>
  <!-- 通过单位名字查询用户 -->
  <select id="findUserByInstitutionName" resultType="com.entity.User">
	   select * from zf_user where  institutionname = #{institutionname,jdbcType=VARCHAR}
	</select>

  <!-- 通过id查询用户 -->
  <select id="findUserById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
	    select * from zf_user where userid = #{userid,jdbcType=INTEGER}
	</select>

  <update id="updateByPrimaryKey" parameterType="com.entity.User">
    update zf_user
    set  institutionname = #{institutionname,jdbcType=VARCHAR},
    certificatetype = #{certificatetype,jdbcType=VARCHAR},
    reviewdepartment = #{reviewdepartment,jdbcType=VARCHAR},
    username = #{username,jdbcType=VARCHAR},
    password = #{password,jdbcType=VARCHAR},
    contactpersonname = #{contactpersonname,jdbcType=VARCHAR},
    telphone = #{telphone,jdbcType=VARCHAR},
    email = #{email,jdbcType=VARCHAR},
    roleid = #{roleid,jdbcType=INTEGER}
    where userid = #{userid,jdbcType=INTEGER}
  </update>
</mapper>